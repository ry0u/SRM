// BEGIN CUT HERE

// END CUT HERE
#line 5 "ProbabilisticTranslator.cpp"

#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int, int> P;

vector<string> split(const string &str, char delim) {
	vector<string> res;
	size_t current = 0, found;
	while((found = str.find_first_of(delim, current)) != string::npos) {
		res.push_back(string(str, current, found - current));
		current = found + 1;
	}
	res.push_back(string(str, current, str.size() - current));
	return res;
}

int dp[2505][55]; //i番目にその語の辞書からj番目に変換するときの最大値

class ProbabilisticTranslator {
	public:
	int maximumFidelity(vector <string> text, vector <string> dictionary, vector <string> frequencies) {
		vector<string> v;
		rep(i, text.size()) {
			vector<string> ret = split(text[i], ' ');
			rep(j, ret.size()) {
				v.push_back(ret[j]);
			}
		}
		
		map<string, vector<string> > m;
		rep(i, dictionary.size()) {
			vector<string> t = split(dictionary[i], ' ');

			REP(j, 2, t.size()) {
				m[t[0]].push_back(t[j]);
			}
		}

		map<pair<string, string>, int> fre;
		rep(i, frequencies.size()) {
			vector<string> t = split(frequencies[i], ' ');
			stringstream ss;
			ss << t[2];
			ss >> fre[mp(t[0], t[1])];
		}

		vector<vector<string> > table;
		rep(j, v.size()) {
			table.push_back(m[v[j]]);
		}

		memset(dp, 0, sizeof(dp));
		rep(j, v.size()-1) {
			rep(k, table[j].size()) {
				rep(l, table[j+1].size()) {
					if(fre.count(mp(table[j][k], table[j+1][l]))) {
						dp[j+1][l] = max(dp[j+1][l], dp[j][k] + fre[mp(table[j][k], table[j+1][l])]);
					} else {
						dp[j+1][l] = max(dp[j+1][l], dp[j][k]);
					}
				}
			}
		}

		int ans = 0;
		rep(j, 55) {
			rep(k, 55) {
				ans = max(ans, dp[j][k]);
			}
		}

		return ans;
	}

	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {"a b c"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"a : x y", "b : y z", "c : x z"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"y z 20", "x y 10", "z x 5"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arg3 = 30; verify_case(0, Arg3, maximumFidelity(Arg0, Arg1, Arg2)); }
	void test_case_1() { string Arr0[] = {"a b c"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"a : x y", "b : p q", "c : x y"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"x p 100", "x q 10", "q x 10"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arg3 = 100; verify_case(1, Arg3, maximumFidelity(Arg0, Arg1, Arg2)); }
	void test_case_2() { string Arr0[] = {"a b", "c"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"a : x y", "b : p q", "c : x y"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"x p 100", "x q 97", "q x 97"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arg3 = 194; verify_case(2, Arg3, maximumFidelity(Arg0, Arg1, Arg2)); }
	void test_case_3() { string Arr0[] = {"a", "bb c"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"a : a a", "bb : b", "c : c", "ccc : a"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"y z 2", "x y 10", "z x 5"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); int Arg3 = 0; verify_case(3, Arg3, maximumFidelity(Arg0, Arg1, Arg2)); }

// END CUT HERE

};


// BEGIN CUT HERE

int main() {

    ProbabilisticTranslator ___test;

    ___test.run_test(-1);

}

// END CUT HERE
