// BEGIN CUT HERE

// END CUT HERE
#line 5 "TopBiologist.cpp"
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <cstring>
#include <queue>
#include <set>
#include <map>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;
typedef long long ll;

map<string, bool> m;
queue<string> que;

class TopBiologist {
	public:
	string findShortestNewSequence(string s) {
		m.clear();

		rep(i, s.size()) {
			stringstream ss;
			REP(j, i, s.size()) {
				string t = s.substr(i, j-i+1);
				m[t] = true;
			}
		}

		que.push("A");
		que.push("C");
		que.push("G");
		que.push("T");

		string ans = "";
		while(que.size()) {
			string t = que.front();
			que.pop();

			if(!m[t]) {
				ans = t;
				break;
			}

			que.push(t + "A");
			que.push(t + "C");
			que.push(t + "G");
			que.push(t + "T");
		}

		// last check
		return ans;
	}

	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const string &Expected, const string &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arg0 = "AGGTCTA"; string Arg1 = "AC"; verify_case(0, Arg1, findShortestNewSequence(Arg0)); }
	void test_case_1() { string Arg0 = "AGACGACGGAGAACGA"; string Arg1 = "T"; verify_case(1, Arg1, findShortestNewSequence(Arg0)); }
	void test_case_2() { string Arg0 = "A"; string Arg1 = "C"; verify_case(2, Arg1, findShortestNewSequence(Arg0)); }
	void test_case_3() { string Arg0 = "AAGATACACCGGCTTCGTG"; string Arg1 = "CAT"; verify_case(3, Arg1, findShortestNewSequence(Arg0)); }

// END CUT HERE

};

// BEGIN CUT HERE
int main() {
    TopBiologist ___test;
    ___test.run_test(-1);

	string s = "TTGGTTGAGGATTGATCTGAACTGTTTAAGATCCAAATTTAAACAGTGCAAACGACCGTGATCTTCTTGGCATCCTGCCAACTCCGGATTGAACCAGATTGCTACGCTTGTACGTCAAGGGAAGCGGATATAGTTGTTGTGTTCATGTGAGATATCCAGCTCGCTCCCATGTATTTCGAGGTGAGTATGGGGAGACACAACCGTTGACACGACTTGAACGGGTTGGAAGCTGATGTTACGCCCGCCCGGACGTTAGGACCTCTCGTGGAATAATGCCAAATCTTAGGTTTTTACCGTTTGGAATGATTACGTTCACATATGCATTCCCGACTACGTATGGAATTTTTCTCATGGGTAGATGACTCCGGGGCACTTCGCTGTTAGCTGTCGCAGGCAAATCTTGGCCTGATTGACACCGGGTGCAATATCCCGGCATCATCTCCACCTCCTCTCCGCGTATGCCGAATAGAAGAGTAGACGGGCGTAGGGGCCCGTAACATTAATGGGTTCATAACGGCTTTCAACTGAAGTATAAATAGATAACGGTACATGCCAGCTGGGTAGACTAAATAATTATGGTATCGACCAACTCGCACCGTGGTTCAGTGACATCCTGTCTTATACTAGCCACCACTTGATACATAAGATATCCAGCTGGGTGGCGCGTCTATCCTGGGCTTACCATGTGGTTTACTTTAAATCTAGAGGTGATACTCGTCTTCGTTAGGGCCCATTGCTATAAGTTGCCAAATTATTTTGCGCTTTGGTGTTCAGACGTTACAAGGCCTTCAGCCCATCGACTAGATTATAGGAATAAAAGGCCCGAGAGCGAACTGATGACCCATCAAGTTCCCAGAATGTTGTATAGCGCTAGTCGTGTTGATACCACGCTGTTCATATCTACTCTTACTCTCTCCTTGTAACTCAATTTAGATTTCCAAGGGCCTTTCGCCCACGCCTCAAATTGAAATTTCACCTGCTCAGACGTAATATGCGCGTAGTGCGAAGTACTGAGAGAACGGTTTAAGTAGGGCCTATAACTCAGAGTAAGAGTTGCGTGCAGATGGGGTGATAGAGACCATACTCGACCTAGGCGGTCATTTACCAATAC";

	cout << ___test.findShortestNewSequence(s) << endl;

}
// END CUT HERE
