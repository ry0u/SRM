// BEGIN CUT HERE

// END CUT HERE
#line 5 "SynchronizingGuideposts.cpp"

#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int, int> P;

vector<string> split(const string &str, char delim) {
	vector<string> res;
	size_t current = 0, found;
	while((found = str.find_first_of(delim, current)) != string::npos) {
		res.push_back(string(str, current, found - current));
		current = found + 1;
	}
	res.push_back(string(str, current, str.size() - current));
	return res;
}

class SynchronizingGuideposts {
	public:
	long long minCost(vector <string> guideposts, int C) {
		int n = guideposts.size();
		vector<ll> pos(n), dis(n), lim(n);

		rep(i, n) {
			ll x;
			vector<string> ret = split(guideposts[i], ' ');
			{
				stringstream ss(ret[0]);
				ss >> x;
				pos[i] = x;
			}
			{
				stringstream ss(ret[1]);
				ss >> x;
				dis[i] = x;
			}
			{
				stringstream ss(ret[2]);
				ss >> x;
				lim[i] = x;
			}
		}

		set<ll> st;
		st.insert(0);

		rep(i, n) {
			if(pos[i] + dis[i] - lim[i] >= 0)
				st.insert(pos[i] + dis[i] - lim[i]);
			if(pos[i] + dis[i] >= 0)
				st.insert(pos[i] + dis[i]);
			if(pos[i] + dis[i] + lim[i] >= 0)
				st.insert(pos[i] + dis[i] + lim[i]);
		}
		st.insert(INF);

		ll ans = INF;
		each(it, st) {
			ll sum = 0;
			rep(i, n) {
				ll res = abs(pos[i] + dis[i] - *it);
				sum += res;
				if(res > lim[i]) {
					sum += (res - lim[i]) * C;
				}
			}

			ans = min(ans, sum);
		}

		return ans;
	}

	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const long long &Expected, const long long &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {"6 -1 5","2 10 4","10 0 5","8 6 5","20 -6 4"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1000; long long Arg2 = 15LL; verify_case(0, Arg2, minCost(Arg0, Arg1)); }
	void test_case_1() { string Arr0[] = {"59 23 13","9 8 28","91 18 50","32 10 80","110 61 120","54 45 18","73 24 118","30 8 73"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 5; long long Arg2 = 479LL; verify_case(1, Arg2, minCost(Arg0, Arg1)); }
	void test_case_2() { string Arr0[] = {"79 4 114","68 41 102","80 80 68","48 1 50","59 17 34","118 59 17","29 3 11","31 26 48","74 27 2"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 46; long long Arg2 = 5731LL; verify_case(2, Arg2, minCost(Arg0, Arg1)); }
	void test_case_3() { string Arr0[] = {"1 -2 10","2 -3 20","3 -4 30","4 -5 40","5 -6 50"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 333; long long Arg2 = 5LL; verify_case(3, Arg2, minCost(Arg0, Arg1)); }

// END CUT HERE

};


// BEGIN CUT HERE

int main() {

    SynchronizingGuideposts ___test;

    ___test.run_test(-1);

}

// END CUT HERE
