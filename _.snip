# Global snippets

snippet     date
options     word
    `strftime("%d %b %Y")`

snippet     date_full
alias       df
options     word
    `strftime("%Y-%m-%dT%H:%M:%S")`

snippet     date_day
alias       dd
options     word
    `strftime("%Y-%m-%d")`

snippet     date_time
alias       dt
options     word
    `strftime("%H:%M:%S")`

snippet     lastmod
abbr        Last modified time
alias       lmod
    Last Modified: `strftime("%Y-%m-%dT%H:%M:%S")`

snippet     filename
alias       fname
options     word
    `bufname('%') =='[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`${0}

snippet     filename_upper_camel
alias       fnameuc
options     word
    `substitute(bufname('%') =='[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\%(^\(.\)\|_\(.\)\)', '\u\1\u\2', 'g')`${0}

snippet     filename_lower_camel
alias       fnamelc
options     word
    `substitute(bufname('%') =='[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\%(_\(.\)\)', '\u\1', 'g')`${0}

snippet temp
abbr problem
    #include <iostream>
    #include <string>
    #include <vector>
    #include <algorithm>
    
    #define REP(i,k,n) for(int i=k;i<n;i++)
    #define rep(i,n) for(int i=0;i<n;i++)

    using namespace std;

    int main()
    {
        int n;
        cin >> n;

        cout << n << endl;
        return 0;
    }

snippet aoj
abbr AIZE JUDGE ONLINE
    #include <iostream>
    #include <string>
    #include <vector>
    #include <algorithm>

    #define REP(i,k,n) for(int i=k;i<n;i++)
    #define rep(i,n) for(int i=0;i<n;i++)

    using namespace std;

    int main()
    {
        int n;
        while(cin >> n && n)
        {

        }

        return 0;
    }

snippet split
abbr string split
    vector<string> split(const string &str, char delim)
    {
	    vector<string> res;
	    size_t current = 0, found;
	    while((found = str.find_first_of(delim, current)) != string::npos)
	    {
		    res.push_back(string(str, current, found - current));
		    current = found + 1;
	    }
	    res.push_back(string(str, current, str.size() - current));
	    return res;
    }

snippet edge
abbr edge
    strcut edge
    {
        int to;
        int cost

        edge(int t,int c)
        {
            to = t;
            cost = c;
        }
    };

snippet dijkstra
abbr dijkstra
    void dijkstra(int s,int n)
    {
	    priority_queue<P,vector<P>,greater<P> > que;
	    fill(d,d+n,INF);

	    d[s] = 0;
	    que.push(P(0,s));

	    while(que.size())
    	{
	    	P p = que.top();
	    	que.pop();
    
		    int v = p.second;
		    if(d[v] < p.first) continue;

		    rep(i,G[v].size())
		    {
			    edge e = G[v][i];
			    if(d[e.to] > d[v] + e.cost)
			    {
				    d[e.to] = d[v] + e.cost;
				    que.push(P(d[e.to],e.to));
			    }
		    }
	    }
    }


snippet Eratosthenes
abbr prime
    bool prime[10000000];
    void Eratosthenes(int n)
    {
        rep(i,n) prime[i] = true;
        prime[1] = false;
 
        REP(i,2,(int)sqrt(n))
        {
            if(prime[i])
            {
                for(int j=0;i*(j+2)<n;j++)
                {
                    prime[i*(j+2)] = 0;
                }
            }
        }
    } 

snippet Point
abbr geometory
    struct Point
    {
        double x, y;
     
        Point(double x=0, double y=0) : x(x), y(y) {}
        
        double distance (const Point &o) const
        {
            return sqrt((x - o.x) * (x - o.x) + (y - o.y) * (y - o.y));
        }
 
        Point operator+(const Point &o) const
        {
            return Point(x+o.x, y+o.y);
        }
        
        Point operator-(const Point &o) const
        {
            return Point(x-o.x, y-o.y);
        }
        
        Point operator*(const double m) const
        {
            return Point(x*m, y*m);
        }
 
        Point operator/(const double d) const
        {
            return Point(x/d, y/d);
        }
 
        double cross(const Point &o) const
        {
            return x * o.y - y * o.x;
        }

        double dot(const Point &o) const
        {
            return x * o.x + y * o.y;
        }

        double atan() const
        {
            return atan2(y, x);
        }

        double norm() const
        {
            return sqrt(dot(*this));
        }
 
        double area_abs(const Point &a,const Point &b) const
        {
            double t = (a.x - x) * (b.y - y);
            double t2 = (a.y - y) * (b.x - x);
            double areas = abs(t-t2);
            return areas/2;
        }

        //符号付き面積
        double area(const Point &a,const Point &b)
        {
            return ((a.x - x) * (b.y - y)) + ((b.x - x) * (y - a.y));
        }

        //線分abが自身に含まれているのかどうか判断する
        int between(const Point &a,const Point &b)
        {
            if(area(a,b) != 0) return 0;
 
            if(a.x != b.x)
            {
                return ((a.x <= x) && (x <= b.x) || (a.x >= x) && (x >= b.x));
            }
            else
            {
                return ((a.y <= y) && (y <= b.y) || (a.y >= y) && (y >= b.y));
            }
        }
 
        double distance_seg(const Point& a,const Point& b)
        {
            if((b-a).dot(*this-a) < EPS)
            {
                return (*this-a).norm();
            }
            if((a-b).dot(*this-b) < EPS)
            {
                return (*this-b).norm();
            }
            return abs((b-a).cross(*this-a)) / (b-a).norm();
        }
 
        //点a,b,cからなる三角形の中に自身が含まれているかどうか
        bool hitPolygon(const Point& a,const Point& b,const Point& c)
        {
            double t = (b-a).cross(*this-b);
            double t2 = (c-b).cross(*this-c);
            double t3 = (a-c).cross(*this-a);
            if((t > 0 && t2 > 0 && t3 > 0) || ( t < 0 && t2 < 0 && t3 < 0))
            {
                return 1;
            }
 
            return 0;
        }
    };

snippet Seg
abbr geometory
    struct Seg
    {
        Point a,b;
 
        Seg (Point a, Point b) : a(a),b(b) {}
 
        bool isIntersect(Seg &s)
        {
            return ((a-b).cross(s.a-a) * (a-b).cross(s.b-a) < EPS) && ((s.b-s.a).cross(a-s.a)*(s.b-s.a).cross(b-s.a) < EPS);
        }
 
        int getCrossPoint(Seg &s,Point &p)
        {
            Point ac = s.a - a;
            int sw = -1;
 
            double temp = (b.x - a.x) * (s.b.y - s.a.y) - (b.y - a.y) * (s.b.x - s.a.x);
 
            if(fabs(temp) > EPS)
            {
                double r = ((s.b.y - s.a.y) * p.x - (s.b.x - s.a.y) * p.y) / temp;
                double s = ((b.y - a.y) * p.x - (b.x - a.x) * p.y) / temp;
                if(r > -EPS && r < 1.0 + EPS && s > -EPS && s < 1.0 + EPS)
                {
                    p.x = a.x + r * (b.x - a.x);
                    p.y = a.y + r * (b.y - a.y);
                    sw = 1;
                }
                else sw = 0;
            }
            return sw;	
        }
    };


snippet BIT
abbr Binary Indexed Tree
    struct BIT
    {
	    vector<int> bit;

	    BIT(int n) : bit(n+1) {}

	    int sum(int i)
	    {
		    int s = 0;
		    while(i > 0)
		    {
			    s += bit[i];
			    i -= i & -i;
		    }
	    	return s;
	    }

	    void add(int i,int x)
	    {
		    while(i <= bit.size())
		    {
			    bit[i] += x;
		    	i += i & -i;
		    }
    	}
    };

