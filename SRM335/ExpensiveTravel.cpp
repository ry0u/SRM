// BEGIN CUT HERE

// END CUT HERE
#line 5 "ExpensiveTravel.cpp"
#include <bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define REP(i,k,n) for(int i=k;i<(int)(n);i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair
#define EPS 1e-4

#define fi first
#define se second

using namespace std;
typedef long long ll;
typedef pair<int, int> P;
typedef pair<double, int> D;

int h, w;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y, int x) {
	if(0 <= y && y < h && 0 <= x && x < w) return true;
	return false;
}

struct edge {
	int from,to;
	int cost;

	edge(int t,int c) : to(t),cost(c) {}
	edge(int f,int t,int c) : from(f),to(t),cost(c) {}

	bool operator<(const edge &e) const {
		return cost < e.cost;
	}
};

int d[100005];
vector<edge> G[10005];

void dijkstra(int s, int n) {
	priority_queue<P, vector<P>, greater<P> > que;
	rep(i, n) {
		d[i] = INF;
	}

	d[s] = 0;
	que.push(P(0,s));

	while(que.size()) {
		P p = que.top();
		que.pop();

		int v = p.second;
		if(d[v] < p.first) continue;

		rep(i, G[v].size()) {
			edge e = G[v][i];
			if(d[e.to] > d[v] + e.cost) {
				d[e.to] = d[v] + e.cost;
				que.push(P(d[e.to],e.to));
			}
		}
	}
}

class ExpensiveTravel {
	public:
	int minTime(vector <string> m, int startRow, int startCol, int endRow, int endCol) {
		h = m.size(), w = m[0].size();
		int n = h * w;

		double v[55][55];
		memset(v, 0, sizeof(v));
		rep(i, h) {
			rep(j, w) {
				int t = (m[i][j] - '0');
				v[i][j] = t;
			}
		}

		double cost[2505];

		rep(i, n) {
			G[i].clear();
		}

		rep(i, h) {
			rep(j, w) {
				rep(k, n) cost[k] = INF;
				cost[i*w+j] = 0;
				priority_queue<D, vector<D>, greater<D> > que;
				que.push(mp(1.0 / v[i][j], i * w + j));

				while(que.size()) {
					D di = que.top(); que.pop();
					int y = di.second / w;
					int x = di.second % w;

					rep(k, 4) {
						int ny = y + dy[k];
						int nx = x + dx[k];

						if(can(ny, nx) && cost[ny*w+nx] > di.first + 1.0 / v[ny][nx]) {
							cost[ny*w+nx] = di.first + 1.0 / v[ny][nx];
							if(cost[ny*w+nx] < 1.0 + EPS) {
								que.push(mp(cost[ny*w+nx], ny * w + nx));
								G[i*w+j].push_back(edge(ny*w+nx, 1));
							}
						}
					}
				}

			}
		}

		//
		// rep(i, n) {
		// 	rep(j, n) {
		// 		if(i == j) continue;
		// 		if(cost[i][j] < 1.0 + EPS) {
		// 			G[i].push_back(edge(j, 1));
		// 		}
		// 	}
		// }

		startRow--;
		startCol--;
		dijkstra(startRow * w + startCol, n);

		endRow--;
		endCol--;
		if(d[endRow * w + endCol] == INF) {
			return -1;
		}

		return d[endRow * w + endCol];
	}

	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {"22334"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 1; int Arg3 = 1; int Arg4 = 5; int Arg5 = 3; verify_case(0, Arg5, minTime(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_1() { string Arr0[] = {"55",
 "52",
 "55"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 2; int Arg3 = 3; int Arg4 = 2; int Arg5 = 1; verify_case(1, Arg5, minTime(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_2() { string Arr0[] = {"251",
 "212",
 "122"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 1; int Arg3 = 3; int Arg4 = 3; int Arg5 = -1; verify_case(2, Arg5, minTime(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_3() { string Arr0[] = {"452232",
 "287979",
 "219872",
 "928234",
 "767676"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 6; int Arg3 = 3; int Arg4 = 1; int Arg5 = 3; verify_case(3, Arg5, minTime(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_4() { string Arr0[] = {"11"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 1; int Arg3 = 1; int Arg4 = 2; int Arg5 = -1; verify_case(4, Arg5, minTime(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_5() { string Arr0[] = {"123456789987654321"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; int Arg2 = 2; int Arg3 = 1; int Arg4 = 16; int Arg5 = 5; verify_case(5, Arg5, minTime(Arg0, Arg1, Arg2, Arg3, Arg4)); }

// END CUT HERE

};


// BEGIN CUT HERE

int main() {

    ExpensiveTravel ___test;

    ___test.run_test(-1);

	cout << ___test.minTime({}, 50, 50, 1, 1) << endl;

	cout << ___test.minTime({}, 50, 50, 1, 1) << endl;
}

// END CUT HERE
